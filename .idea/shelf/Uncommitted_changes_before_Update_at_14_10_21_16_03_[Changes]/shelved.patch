Index: products/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework import viewsets\r\nfrom .models import Product, ProductReview\r\nfrom .serializers import ProductSerializer, ProductReviewSerializer\r\nfrom django_filters import rest_framework as filters\r\nfrom rest_framework import filters as rest_filters\r\nfrom rest_framework import permissions\r\n\r\n\r\nclass ProductViewSet(viewsets.ModelViewSet):\r\n\r\n    queryset = Product.objects.all()\r\n    serializer_class = ProductSerializer\r\n\r\n    queryset = Product.objects.all()\r\n    filter_backends = [\r\n        filters.DjangoFilterBackend,\r\n        rest_filters.SearchFilter\r\n    ]\r\n    filter_fields = ['price', 'title']\r\n    search_fields = ['title', 'id', 'specification']\r\n    \r\n\r\n    # def get_permissions(self):\r\n    #     if self.\r\n\r\nclass ProductReviewViewSet(viewsets.ModelViewSet):\r\n    queryset = ProductReview.objects.all()\r\n    serializer_class = ProductReviewSerializer\r\n    permission_classes = [permissions.IsAuthenticatedOrReadOnly]\r\n\r\n\r\n\r\n    def get_serializer_context(self):\r\n\r\n        return {\r\n            'request': self.request\r\n        }\r\n\r\n    def get_serializer(self, *args, **kwargs):\r\n\r\n        kwargs['context'] = self.get_serializer_context()\r\n        return self.serializer_class(*args, **kwargs)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/products/views.py b/products/views.py
--- a/products/views.py	(revision 0d9f02b1ef8180d72682b81d632745cac196c75d)
+++ b/products/views.py	(date 1634051256598)
@@ -4,22 +4,30 @@
 from django_filters import rest_framework as filters
 from rest_framework import filters as rest_filters
 from rest_framework import permissions
+from django.core.paginator import Paginator
+from django.shortcuts import render
 
 
 class ProductViewSet(viewsets.ModelViewSet):
 
-    queryset = Product.objects.all()
     serializer_class = ProductSerializer
-
     queryset = Product.objects.all()
+
     filter_backends = [
         filters.DjangoFilterBackend,
         rest_filters.SearchFilter
     ]
     filter_fields = ['price', 'title']
     search_fields = ['title', 'id', 'specification']
-    
+
+    def listing(self, request):
+        product_list = Product.objects.all()
+        paginator = Paginator(product_list, 2)  # Show 2 contacts per page.
 
+        page_number = request.GET.get('page')
+        page_obj = paginator.get_page(page_number)
+        return render(request, 'list.html', {'page_obj': page_obj})
+
     # def get_permissions(self):
     #     if self.
 
Index: noteshop/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nfrom pathlib import Path\r\n\r\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\r\nBASE_DIR = Path(__file__).resolve().parent.parent\r\n\r\n\r\n# Quick-start development settings - unsuitable for production\r\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = 'django-insecure-d76@!p902rrjwg8i0_@ma_@5na7wlt^4nt=mnopzz4jn4p)z7w'\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\nDEBUG = True\r\n\r\nALLOWED_HOSTS = []\r\n\r\n\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    #Приложения \r\n    'products',\r\n    #Lib\r\n    'rest_framework'\r\n    \r\n    # Accounts\r\n    'account',\r\n\r\n    ## Libraries\r\n    # Token Authentication\r\n    'rest_framework',\r\n    'rest_framework.authtoken',\r\n\r\n\r\n]\r\n\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    'django.middleware.csrf.CsrfViewMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n]\r\n\r\nROOT_URLCONF = 'noteshop.urls'\r\n\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [],\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nWSGI_APPLICATION = 'noteshop.wsgi.application'\r\n\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\r\n\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.postgresql',\r\n        'NAME': 'noteshop',\r\n        # 'USER': 'alisher',\r\n        'USER': 'baiel',\r\n        'PASSWORD': '1',\r\n        'HOST': 'localhost',\r\n        'PORT': 5432,\r\n        \r\n    }\r\n}\r\n\r\n# Password validation\r\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\r\n\r\nAUTH_PASSWORD_VALIDATORS = [\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\r\n    },\r\n]\r\n\r\n\r\n# Internationalization\r\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\r\n\r\nLANGUAGE_CODE = 'en-us'\r\n\r\nTIME_ZONE = 'UTC'\r\n\r\nUSE_I18N = True\r\n\r\nUSE_L10N = True\r\n\r\nUSE_TZ = True\r\n\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\r\n\r\nSTATIC_URL = '/static/'\r\n\r\n\r\nMEDIA_URL = '/media/'\r\n\r\n# Default primary key field type\r\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\r\n\r\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\r\n\r\n\r\nREST_FRAMEWORK = {\r\n    'DEFAULT_AUTHENTICATION_CLASSES': ['rest_framework.authentication.TokenAuthentication'],\r\n\r\n}\r\n\r\n\r\nAUTH_USER_MODEL = 'account.User'\r\n\r\n# Email configs\r\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\r\n\r\nEMAIL_HOST = 'smtp.gmail.com'\r\n\r\nEMAIL_PORT = 587\r\n\r\nEMAIL_USE_TLS = True\r\n\r\n# свой email\r\nEMAIL_HOST_USER = 'noteshop.bishkek@gmail.com'\r\nEMAIL_HOST_PASSWORD = '456545654'
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/noteshop/settings.py b/noteshop/settings.py
--- a/noteshop/settings.py	(revision 0d9f02b1ef8180d72682b81d632745cac196c75d)
+++ b/noteshop/settings.py	(date 1634205591477)
@@ -28,9 +28,7 @@
     'django.contrib.staticfiles',
     #Приложения 
     'products',
-    #Lib
-    'rest_framework'
-    
+
     # Accounts
     'account',
 
@@ -38,7 +36,8 @@
     # Token Authentication
     'rest_framework',
     'rest_framework.authtoken',
-
+    'django_filters',
+    'drf_yasg',
 
 ]
 
@@ -137,8 +136,12 @@
 
 
 REST_FRAMEWORK = {
-    'DEFAULT_AUTHENTICATION_CLASSES': ['rest_framework.authentication.TokenAuthentication'],
-
+    'DEFAULT_AUTHENTICATION_CLASSES': ['rest_framework.authentication.TokenAuthentication',
+                                       'rest_framework.authentication.SessionAuthentication'
+                                       ],
+    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
+    'PAGE_SIZE': 5,
+    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
 }
 
 
Index: noteshop/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib import admin\r\nfrom django.urls import path, include\r\nfrom rest_framework.routers import DefaultRouter\r\nfrom products.views import ProductViewSet\r\nfrom django.conf import settings\r\nfrom django.conf.urls.static import static \r\n\r\n\r\nrouter = DefaultRouter()\r\nrouter.register('products', ProductViewSet)\r\n\r\nurlpatterns = [\r\n    path('admin/', admin.site.urls),\r\n    path('api/v1/', include(router.urls)),\r\n    path('api/v1/', include('account.urls')),\r\n\r\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\r\n\r\n    \r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/noteshop/urls.py b/noteshop/urls.py
--- a/noteshop/urls.py	(revision 0d9f02b1ef8180d72682b81d632745cac196c75d)
+++ b/noteshop/urls.py	(date 1634136634620)
@@ -1,19 +1,39 @@
+from django.conf.urls import url
 from django.contrib import admin
 from django.urls import path, include
 from rest_framework.routers import DefaultRouter
 from products.views import ProductViewSet
 from django.conf import settings
 from django.conf.urls.static import static 
+from django.conf.urls import url
+from drf_yasg.views import get_schema_view
+from drf_yasg import openapi
+from rest_framework import permissions
 
+
+schema_view = get_schema_view(
+   openapi.Info(
+      title="Snippets API",
+      default_version='v1',
+      description="Test description",
+      terms_of_service="https://www.google.com/policies/terms/",
+      contact=openapi.Contact(email="contact@snippets.local"),
+      license=openapi.License(name="BSD License"),
+   ),
+   public=True,
+   permission_classes=(permissions.AllowAny,),
+)
 
 router = DefaultRouter()
 router.register('products', ProductViewSet)
 
 urlpatterns = [
+    url(r'^swagger(?P<format>\.json|\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'),
+    url(r'^swagger/$', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
+    url(r'^redoc/$', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
     path('admin/', admin.site.urls),
     path('api/v1/', include(router.urls)),
-    path('api/v1/', include('account.urls')),
-
+    path('api/v1/account/', include('account.urls')),
 ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
 
     
Index: req.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Django==3.2.7\r\ndjangorestframework==3.12.4\r\npsycopg2-binary==2.9.1\r\nPillow\r\ndjango-utils-six\r\ndjango-model-utils==4.1.1\r\ndjango-filter\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/req.txt b/req.txt
--- a/req.txt	(revision 0d9f02b1ef8180d72682b81d632745cac196c75d)
+++ b/req.txt	(date 1634135970509)
@@ -5,3 +5,4 @@
 django-utils-six
 django-model-utils==4.1.1
 django-filter
+drf-yasg
\ No newline at end of file
Index: account/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\r\n\r\n# Create your models here.\r\nfrom django.contrib.auth.base_user import BaseUserManager, AbstractBaseUser\r\nfrom django.utils.crypto import get_random_string\r\nfrom django.core.mail import send_mail\r\n\r\nclass UserManager(BaseUserManager):\r\n    \r\n    def _create(self, email, password, **extra_fields):\r\n        \r\n        if not email:\r\n            raise ValueError('Поле Email не может быть пустым.')\r\n\r\n        email = self.normalize_email(email)\r\n        user = self.model(email=email, **extra_fields)\r\n        user.set_password(password)\r\n        user.save()\r\n        return user\r\n\r\n    def create_user(self, email, password, **extra_fields):\r\n        # is_staff = False\r\n        # is_active = True\r\n        extra_fields.setdefault('is_staff', False)\r\n\r\n        return self._create(email, password, **extra_fields)\r\n\r\n    def create_superuser(self, email, password, **extra_fields):\r\n        extra_fields.setdefault('is_staff', True)\r\n        extra_fields.setdefault('is_active', True)\r\n\r\n        return self._create(email, password, **extra_fields)\r\n\r\n\r\nclass User(AbstractBaseUser):\r\n    email = models.EmailField(primary_key=True)\r\n    name = models.CharField(max_length=30)\r\n    last_name = models.CharField(max_length=40, blank=True)\r\n    is_active = models.BooleanField(default=False)\r\n    is_staff = models.BooleanField(default=False)\r\n    activation_code = models.CharField(max_length=10, blank=True)\r\n\r\n    objects = UserManager()\r\n    USERNAME_FIELD = 'email'\r\n    REQUIRED_FIELDS = ['name']\r\n    \r\n    def __str__(self):\r\n        return self.email\r\n\r\n    def has_module_perms(self, app_label):\r\n        return self.is_staff\r\n\r\n    def has_perm(self, perm, obj=None):\r\n        return self.is_staff\r\n\r\n    def create_activation_code(self):\r\n        code = get_random_string(10)\r\n        self.activation_code = code\r\n        self.save()\r\n\r\n    \r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/account/models.py b/account/models.py
--- a/account/models.py	(revision 0d9f02b1ef8180d72682b81d632745cac196c75d)
+++ b/account/models.py	(date 1634117172371)
@@ -1,3 +1,4 @@
+from django.contrib.auth.hashers import make_password
 from django.db import models
 
 # Create your models here.
@@ -5,10 +6,10 @@
 from django.utils.crypto import get_random_string
 from django.core.mail import send_mail
 
+
 class UserManager(BaseUserManager):
-    
+
     def _create(self, email, password, **extra_fields):
-        
         if not email:
             raise ValueError('Поле Email не может быть пустым.')
 
@@ -43,7 +44,7 @@
     objects = UserManager()
     USERNAME_FIELD = 'email'
     REQUIRED_FIELDS = ['name']
-    
+
     def __str__(self):
         return self.email
 
@@ -57,6 +58,3 @@
         code = get_random_string(10)
         self.activation_code = code
         self.save()
-
-    
-
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1634045101622)
+++ b/.idea/misc.xml	(date 1634045101622)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9 (Hackatoon)" project-jdk-type="Python SDK" />
+  <component name="PyCharmProfessionalAdvertiser">
+    <option name="shown" value="true" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1634118695557)
+++ b/.idea/vcs.xml	(date 1634118695557)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+    <mapping directory="$PROJECT_DIR$/buyandsell" vcs="Git" />
+    <mapping directory="$PROJECT_DIR$/buyandsell1" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1634044670952)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1634044670952)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1634044670888)
+++ b/.idea/modules.xml	(date 1634044670888)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/Hackatoon.iml" filepath="$PROJECT_DIR$/.idea/Hackatoon.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/Hackatoon.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Hackatoon.iml b/.idea/Hackatoon.iml
new file mode 100644
--- /dev/null	(date 1634045101438)
+++ b/.idea/Hackatoon.iml	(date 1634045101438)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/venv" />
+    </content>
+    <orderEntry type="jdk" jdkName="Python 3.9 (Hackatoon)" jdkType="Python SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+  <component name="PyDocumentationSettings">
+    <option name="format" value="PLAIN" />
+    <option name="myDocStringFormat" value="Plain" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1634044671188)
+++ b/.idea/.gitignore	(date 1634044671188)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
--- /dev/null	(date 1634044669708)
+++ b/.idea/inspectionProfiles/Project_Default.xml	(date 1634044669708)
@@ -0,0 +1,13 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="PyUnresolvedReferencesInspection" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="ignoredIdentifiers">
+        <list>
+          <option value="telebot.TeleBot.*" />
+          <option value="telebot.*" />
+        </list>
+      </option>
+    </inspection_tool>
+  </profile>
+</component>
\ No newline at end of file
Index: products/migrations/0003_productreview.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/products/migrations/0003_productreview.py b/products/migrations/0003_productreview.py
new file mode 100644
--- /dev/null	(date 1634050475882)
+++ b/products/migrations/0003_productreview.py	(date 1634050475882)
@@ -0,0 +1,30 @@
+# Generated by Django 3.2.7 on 2021-10-12 14:54
+
+from django.conf import settings
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
+        ('products', '0002_rename_description_product_specification'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='ProductReview',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('created', models.DateTimeField(auto_now_add=True, null=True)),
+                ('text', models.TextField()),
+                ('rating', models.PositiveBigIntegerField(default=1)),
+                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
+                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='products.product')),
+            ],
+            options={
+                'abstract': False,
+            },
+        ),
+    ]
Index: account/migrations/0002_alter_user_activation_code.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/account/migrations/0002_alter_user_activation_code.py b/account/migrations/0002_alter_user_activation_code.py
new file mode 100644
--- /dev/null	(date 1634045209999)
+++ b/account/migrations/0002_alter_user_activation_code.py	(date 1634045209999)
@@ -0,0 +1,18 @@
+# Generated by Django 3.2.7 on 2021-10-12 13:26
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('account', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='user',
+            name='activation_code',
+            field=models.CharField(blank=True, max_length=10),
+        ),
+    ]
Index: account/migrations/0001_initial.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/account/migrations/0001_initial.py b/account/migrations/0001_initial.py
new file mode 100644
--- /dev/null	(date 1633100072516)
+++ b/account/migrations/0001_initial.py	(date 1633100072516)
@@ -0,0 +1,30 @@
+# Generated by Django 3.2.7 on 2021-10-01 14:54
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='User',
+            fields=[
+                ('password', models.CharField(max_length=128, verbose_name='password')),
+                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
+                ('email', models.EmailField(max_length=254, primary_key=True, serialize=False)),
+                ('name', models.CharField(max_length=30)),
+                ('last_name', models.CharField(blank=True, max_length=40)),
+                ('is_active', models.BooleanField(default=False)),
+                ('is_staff', models.BooleanField(default=False)),
+                ('activation_code', models.CharField(blank=True, max_length=20)),
+            ],
+            options={
+                'abstract': False,
+            },
+        ),
+    ]
